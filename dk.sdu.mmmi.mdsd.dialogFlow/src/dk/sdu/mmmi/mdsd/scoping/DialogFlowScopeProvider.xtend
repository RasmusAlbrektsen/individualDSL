/*
 * generated by Xtext 2.24.0
 */
package dk.sdu.mmmi.mdsd.scoping

import org.eclipse.xtext.scoping.IScope
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import dk.sdu.mmmi.mdsd.dialogFlow.ResponseValue
import dk.sdu.mmmi.mdsd.dialogFlow.DialogFlowPackage
import org.eclipse.xtext.EcoreUtil2
import dk.sdu.mmmi.mdsd.dialogFlow.Entity
import org.eclipse.xtext.scoping.Scopes
import dk.sdu.mmmi.mdsd.dialogFlow.DialogFlowSystem
import dk.sdu.mmmi.mdsd.dialogFlow.Declaration
import java.util.List
import java.util.Collections
import java.util.HashSet
import java.util.ArrayList
import dk.sdu.mmmi.mdsd.dialogFlow.Mapping
import dk.sdu.mmmi.mdsd.dialogFlow.EntityValue
import dk.sdu.mmmi.mdsd.dialogFlow.ActionValue

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class DialogFlowScopeProvider extends AbstractDialogFlowScopeProvider {

	override IScope getScope(EObject context, EReference reference) {
		//Lets you find the declaration of a mapped Entity
		
		switch context {
			Mapping case reference == DialogFlowPackage.Literals.MAPPING__ENTITY: {
				val system = EcoreUtil2.getContainerOfType(context, DialogFlowSystem)
				return Scopes.scopeFor(system.allEntities)
		}
		
			ActionValue case reference == DialogFlowPackage.Literals.ACTION_VALUE__TYPE: {
				val system = EcoreUtil2.getContainerOfType(context, DialogFlowSystem)
				return Scopes.scopeFor(system.allActionValues)
			}
		
		}
		
		
		return super.getScope(context, reference)
	}
	
	def static List<Entity> allEntities(DialogFlowSystem system) {
		val visited = new HashSet()
		val entities = new ArrayList<Entity>
		var s = system
		while(s!==null) {
			if(visited.contains(s)) {
				return Collections.EMPTY_LIST
			}
			visited.add(s)
			entities.addAll(s.declarations.filter(Entity))
			s = s.superSystem
		}
		return entities
	}
		
	def static List<Entity> allActionValues(DialogFlowSystem system) {
		val visited = new HashSet()
		val entities = new ArrayList<Entity>
		var s = system
		while(s!==null) {
			if(visited.contains(s)) {
				return Collections.EMPTY_LIST
			}
			visited.add(s)
			entities.addAll(s.declarations.filter(Entity))
			s = s.superSystem
		}
		return entities
	}
		
}
