/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import dk.sdu.mmmi.mdsd.dialogFlow.DialogFlowSystem
import dk.sdu.mmmi.mdsd.dialogFlow.Entity
import dk.sdu.mmmi.mdsd.dialogFlow.Intent
import org.eclipse.emf.common.util.EList

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DialogFlowGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		resource.allContents.filter(DialogFlowSystem).forEach[generateSystem(resource, fsa)]
		
	}
	
	def generateSystem(DialogFlowSystem system, Resource resource, IFileSystemAccess2 fsa) {
		val systemDeclarations = system.declarations

		
		
		
		val rootElementCreator = new RootElementCreator(system.name)
		rootElementCreator.generateElements(system, fsa)
		
		val entityCreator = new EntityCreator(system.name)
		val intentCreator = new IntentCreator(system.name)
		for(d: systemDeclarations) {
			if(d instanceof Entity) {
				entityCreator.generateEntity(d, fsa)
			} else if(d instanceof Intent) {
				intentCreator.generateIntent(d, fsa)
			}
		}
		if(system.superSystem !== null) {
			val superSystem = system.superSystem
			val superDeclarations = superSystem.declarations	
			for(d: superDeclarations) {
			if(d instanceof Entity) {
				entityCreator.generateEntity(d, fsa)
			} else if(d instanceof Intent) {
				intentCreator.generateIntent(d, fsa)
			}
		}
		}
		
	}
	
}
